-- Konfigurasi
print("Testis 3")

-- Konfigurasi
local petNameToUpgrade = "Nightguard Afton" -- Name of the pet/unit to be upgraded
local targetWavesForUpgrade = { "Wave 0/15", "Wave 1/15" } -- Waves where upgrades should start
local stopWave = "Wave 5/15" -- Wave to stop the upgrade loop
local checkInterval = 5 -- Time interval (in seconds) between each check
local PlacementMaxCap = 3 -- Maximum number of units that can be placed

-- Services and player references
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local PathWaveDetection = Player.PlayerGui.Top.Wave
local TowersFolder = workspace:WaitForChild("Towers")
local upgradeActive = false -- Status flag for the upgrade process

-- Function to check if the current wave is eligible for upgrades
local function isWaveEligibleForUpgrade(currentWaveText)
    return table.find(targetWavesForUpgrade, currentWaveText) ~= nil
end

-- Function to upgrade a specific unit
local function upgradeUnit(unit)
    local success, err = pcall(function()
        game:GetService("ReplicatedStorage").Remotes.Towers.Upgrade:FireServer(unit)
    end)
    if not success then
        warn("Failed to upgrade unit: " .. unit.Name .. " - Error: " .. err)
    else
        print("Upgrade command sent for unit: " .. unit.Name)
    end
end

-- Function to check if a unit has its "UpgradeStar" at Star3
local function isUnitAtStar3(unit)
    local upgradeFolder = TowersFolder:FindFirstChild(unit.Name) -- Locate the unit folder in Towers
    if upgradeFolder then
        local upgradeStar = upgradeFolder:FindFirstChild("UpgradeStar") -- Find UpgradeStar
        if upgradeStar then
            return upgradeStar.Value == "Star3" -- Check if it is Star3
        else
            print("UpgradeStar not found in unit folder: " .. unit.Name)
            return false
        end
    else
        print("Unit folder not found in Towers: " .. unit.Name)
        return false
    end
end

-- Function to check if all units have been upgraded to Star3
local function allUnitsUpgradedToStar3(units)
    for _, unit in ipairs(units) do
        if not isUnitAtStar3(unit) then
            return false
        end
    end
    return true
end

-- Main loop for upgrading units
while true do
    local waveText = PathWaveDetection.Text

    -- Activate the upgrade process if the current wave is in the target list
    if isWaveEligibleForUpgrade(waveText) then
        upgradeActive = true
    end

    -- Stop the upgrade process if the stopWave is reached
    if waveText == stopWave then
        upgradeActive = false
    end

    -- If the upgrade process is active, execute the logic to find and upgrade units
    if upgradeActive then
        local allUpgradableUnits = {}
        for _, unit in pairs(TowersFolder:GetChildren()) do
            if unit.Name == petNameToUpgrade then
                table.insert(allUpgradableUnits, unit)
            end
        end

        -- If units are found, proceed with the upgrade process
        if #allUpgradableUnits > 0 then
            if #allUpgradableUnits >= PlacementMaxCap then
                print("Maximum placement capacity reached. Checking and upgrading units...")

                -- Attempt to upgrade units not yet at Star3
                local allStar3 = allUnitsUpgradedToStar3(allUpgradableUnits)
                if not allStar3 then
                    for _, unit in ipairs(allUpgradableUnits) do
                        if not isUnitAtStar3(unit) then
                            upgradeUnit(unit)
                        end
                    end
                else
                    -- All units have reached Star3; execute the loadstring
                    print("All units are at Star3. Executing loadstring...")
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/LocasTheBoys/efenprojekmatiktuga/refs/heads/main/cocoktanemN62"))()
                    upgradeActive = false -- Stop further checks after executing loadstring
                end
            else
                print("Not enough units placed for upgrade. Current count: " .. #allUpgradableUnits)
            end
        else
            print("No units found for the specified pet name.")
        end
    end

    wait(checkInterval) -- Delay between each loop iteration
end

