-- Konfigurasi
print("Testis 4")
wait(15)
-- Konfigurasi
local targetWavesForUpgrade = { "Wave 0/15", "Wave 1/15" } -- Wave di mana upgrade diaktifkan
local stopWave = "Wave 10/15" -- Wave di mana loop upgrade akan berhenti
local petNameToUpgrade = "Nightguard Afton" -- Nama pet yang akan di-upgrade
local checkInterval = 5 -- Interval waktu antar pengecekan (dalam detik)
local targetMoney = nil -- Target jumlah uang untuk memulai upgrade, bisa diatur ke nil untuk menonaktifkan
local PlacementMaxCap = 3 -- Kapasitas maksimum unit yang bisa dipasang

-- Path untuk mendeteksi wave
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local PathWaveDetection = Player.PlayerGui.Top.Wave
local Money = Player:WaitForChild("Money") -- Mengambil objek Money dari pemain
local upgradeActive = false

-- Fungsi untuk mengecek apakah wave saat ini dalam daftar target
local function isWaveEligibleForUpgrade(currentWaveText)
    return table.find(targetWavesForUpgrade, currentWaveText) ~= nil
end

-- Fungsi untuk menghitung jumlah unit yang telah ditempatkan
local function countPlacedUnits(unitName)
    local count = 0
    for _, tower in pairs(workspace.Towers:GetChildren()) do
        if tower.Name == unitName and tower:IsA("Model") then
            count = count + 1
        end
    end
    return count
end

-- Fungsi untuk memeriksa apakah semua "Clowntrap" telah diupgrade ke "Star3"
local function areAllClowntrapsUpgraded()
    for _, tower in pairs(workspace.Towers:GetChildren()) do
        if tower.Name == petNameToUpgrade then
            local upgradeStar = tower:FindFirstChild("UpgradeStar")
            if upgradeStar and upgradeStar.Value ~= "Star3" then
                return false -- Jika ada satu yang tidak "Star3", kembalikan false
            end
        end
    end
    return true -- Semua sudah "Star3"
end

-- Loop utama script upgrade
while true do
    local waveText = PathWaveDetection.Text

    -- Aktifkan upgrade jika wave saat ini termasuk dalam target wave
    if isWaveEligibleForUpgrade(waveText) and (targetMoney == nil or Money.Value >= targetMoney) then
        upgradeActive = true
    end

    -- Hentikan upgrade jika wave saat ini mencapai stopWave
    if waveText == stopWave then
        upgradeActive = false
    end

    -- Jika upgrade diaktifkan, jalankan proses upgrade
    if upgradeActive then
        local currentPlacementCount = countPlacedUnits(petNameToUpgrade)

        if currentPlacementCount >= PlacementMaxCap then
            if areAllClowntrapsUpgraded() then
                upgradeActive = false
                print("Semua Clowntrap sudah diupgrade ke Star3, mengeksekusi loadstring.")

                -- Eksekusi loadstring jika semua Clowntrap telah diupgrade
                loadstring(game:HttpGet("https://raw.githubusercontent.com/LocasTheBoys/efenprojekmatiktuga/refs/heads/main/cocoktanemU64"))()
            else
                print("Belum semua Clowntrap diupgrade ke Star3. Upgrade tidak dilanjutkan.")
            end
        else
            local allUpgradableUnits = {}
            for _, unit in pairs(workspace.Towers:GetChildren()) do
                if unit.Name == petNameToUpgrade then
                    local primaryPart = unit:FindFirstChildWhichIsA("BasePart")
                    if primaryPart then
                        table.insert(allUpgradableUnits, unit)
                    end
                end
            end

            if #allUpgradableUnits > 0 then
                for _, unit in ipairs(allUpgradableUnits) do
                    local upgradeArgs = {
                        [1] = unit
                    }
                    local success, err = pcall(function()
                        game:GetService("ReplicatedStorage").Remotes.Towers.Upgrade:FireServer(unpack(upgradeArgs))
                    end)
                    if not success then
                        warn("Upgrade failed for unit: " .. unit.Name .. " with error: " .. err)
                    end
                end
            end
        end
    end

    wait(checkInterval) -- Delay antar loop
end

-- Listener untuk mendeteksi perubahan nilai Money
Money:GetPropertyChangedSignal("Value"):Connect(function()
    if (targetMoney == nil or Money.Value >= targetMoney) and not upgradeActive then
        print("Jumlah money tercapai: " .. Money.Value)
        upgradeActive = true -- Mengaktifkan upgrade jika target uang tercapai
    end
end)

-- Listener untuk mendeteksi perubahan teks di PathWaveDetection
PathWaveDetection:GetPropertyChangedSignal("Text"):Connect(function()
    local waveText = PathWaveDetection.Text
    if waveText == stopWave then
        upgradeActive = false
        print("Loop dihentikan karena mencapai " .. stopWave)
    end
end)
